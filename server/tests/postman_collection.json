{
  "info": {
    "name": "NextBuy API Test Collection",
    "description": "Comprehensive API testing collection for NextBuy bot protection and rate limiting",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "timestamp",
      "value": "{{$timestamp}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is less than 200ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              "",
              "pm.test('Response contains status', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Root Endpoint",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains message', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message');",
              "    pm.expect(jsonData.message).to.include('NextBuy Server');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        }
      }
    },
    {
      "name": "Bot Dashboard",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is either 200 or 403', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/admin/bot-dashboard",
          "host": ["{{baseUrl}}"],
          "path": ["api", "admin", "bot-dashboard"]
        }
      }
    },
    {
      "name": "Bot Metrics",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is either 200 or 403', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/admin/bot-metrics",
          "host": ["{{baseUrl}}"],
          "path": ["api", "admin", "bot-metrics"]
        }
      }
    },
    {
      "name": "Rate Limiting Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200 or 429', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
              "});",
              "",
              "if (pm.response.code === 429) {",
              "    pm.test('Rate limit message present', function () {",
              "        const responseText = pm.response.text();",
              "        pm.expect(responseText).to.include('rate limit');",
              "    });",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    },
    {
      "name": "Bot Detection Test - Suspicious User Agent",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200 or 403', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "User-Agent",
            "value": "curl/7.68.0"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        }
      }
    },
    {
      "name": "SQL Injection Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400 or 403 (blocked)', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([400, 403, 404]);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/products?id=1' OR '1'='1",
          "host": ["{{baseUrl}}"],
          "path": ["api", "products"],
          "query": [
            {
              "key": "id",
              "value": "1' OR '1'='1"
            }
          ]
        }
      }
    },
    {
      "name": "POST Request Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is not 500', function () {",
              "    pm.expect(pm.response.code).to.not.equal(500);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"test\": \"data\",\n    \"timestamp\": \"{{timestamp}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/bot-protection/test",
          "host": ["{{baseUrl}}"],
          "path": ["api", "bot-protection", "test"]
        }
      }
    },
    {
      "name": "Headers Test",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "X-Real-IP",
            "value": "192.168.1.1"
          },
          {
            "key": "X-Forwarded-For",
            "value": "10.0.0.1"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        }
      }
    },
    {
      "name": "Concurrent Request Test 1",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      }
    }
  ]
}
